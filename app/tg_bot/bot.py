import sys
import os
import logging
from pathlib import Path
from io import BytesIO
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ContentType
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import aiohttp
from dotenv import load_dotenv

project_root = Path(__file__).parent.parent.parent
sys.path.append(str(project_root))

from app.backend.db_client import AirtableClient

load_dotenv()
API_URL = os.getenv('BACKEND_URL', 'http://backend:8000')
TOKEN = os.getenv('TELEGRAM_TOKEN')
if not TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN is not set")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
db = AirtableClient()

class Form(StatesGroup):
    waiting_for_file = State()
    waiting_for_text = State()

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ /start
def main_menu() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(
        KeyboardButton("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"),
        KeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç"),
    )
    return kb

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user = message.from_user
    # —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ—Ç
    user_id = db.get_user_id_by_tg_id(str(user.id))
    if not user_id:
        rec = db.create_user(tg_id=str(user.id), login=None, password=None)
        logging.info(f"Created new user: {rec}")
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –∫–∞–∫ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

# –≤–º–µ—Å—Ç–æ callback_query ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≤–∏–º —Ç–µ–∫—Å—Ç
@dp.message_handler(lambda m: m.text == "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
async def cmd_upload_file(message: types.Message):
    await message.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
        reply_markup=ReplyKeyboardRemove()  # –ø—Ä—è—á–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    await Form.waiting_for_file.set()

@dp.message_handler(lambda m: m.text == "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç")
async def cmd_enter_text(message: types.Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
        reply_markup=ReplyKeyboardRemove()
    )
    await Form.waiting_for_text.set()

# –º–µ–Ω—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
def result_menu(record_id: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç",    callback_data=f"text:{record_id}"),
        InlineKeyboardButton("üìä Score",    callback_data=f"score:{record_id}"),
        InlineKeyboardButton("üí° Explanation", callback_data=f"expl:{record_id}"),
        InlineKeyboardButton("üî¢ Tokens",   callback_data=f"tokens:{record_id}"),
    )
    return kb


async def process_analysis(chat_id: int, record_id: str):
    """–ü—Ä–∏—Å—ã–ª–∞–µ–º –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å:", reply_markup=result_menu(record_id))

@dp.message_handler(state=Form.waiting_for_file, content_types=[ContentType.DOCUMENT, ContentType.PHOTO])
async def handle_file(message: types.Message, state: FSMContext):
    await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª...")
    # —Å–∫–∞—á–∏–≤–∞–µ–º –≤ –ø–∞–º—è—Ç—å
    bio = BytesIO()
    if message.document:
        await message.document.download(destination=bio)
        filename = message.document.file_name
        mime = message.document.mime_type
    else:  # —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        await photo.download(destination=bio)
        filename = "photo.jpg"
        mime = "image/jpeg"
    bio.seek(0)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±—ç–∫
    data = aiohttp.FormData()
    data.add_field('file', bio, filename=filename, content_type=mime)
    async with aiohttp.ClientSession() as session:
        async with session.post(f"{API_URL}/api/v1/score/file", data=data) as resp:
            result = await resp.json()

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å‚Äì–∑–∞–ø–∏—Å—å
    rec = db.create_record(result['text'], result['tokens'], result['explanation'], result['score'])
    record_id = rec['fields']['record_id']
    db.link_user_to_record(user_id=str(message.from_user.id), record_id=record_id)

    await process_analysis(message.chat.id, record_id)
    await state.finish()

@dp.message_handler(state=Form.waiting_for_text, content_types=ContentType.TEXT)
async def handle_text(message: types.Message, state: FSMContext):
    text = message.text.strip()
    await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç...")
    async with aiohttp.ClientSession() as session:
        resp = await session.post(
            f"{API_URL}/api/v1/score/text",
            json={"text": text}
        )
        result = await resp.json()
    rec = db.create_record(text, result['tokens'], result['explanation'], result['score'])
    record_id = rec['fields']['record_id']
    db.link_user_to_record(user_id=str(message.from_user.id), record_id=record_id)

    await process_analysis(message.chat.id, record_id)
    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith(("score:", "expl:", "tokens:", "text:")))
async def cb_show(cq: types.CallbackQuery):
    action, record_id = cq.data.split(":", 1)
    record = db.get_record_by_id(record_id)
    text = {
        "score":     f"üìä Score: {record['score']}",
        "expl":      f"üí° Explanation:\n{record['explanation']}",
        "tokens":    "üî¢ Tokens:\n" + "\n".join([f"{t['token']}: {t['ai_prob']:.3f}" for t in record['tokens']]),
        "text":      f"üìù –¢–µ–∫—Å—Ç:\n{record['text']}"
    }[action]

    msg = await bot.send_message(
        cq.message.chat.id,
        text,
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delmsg:{0}")  # placeholder
        )
    )
    # –æ–±–Ω–æ–≤–∏–º callback_data —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ message_id
    await bot.edit_message_reply_markup(
        cq.message.chat.id,
        msg.message_id,
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delmsg:{msg.message_id}")
        )
    )
    await cq.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("delmsg:"))
async def cb_delete(cq: types.CallbackQuery):
    _, mid = cq.data.split(":", 1)
    await bot.delete_message(cq.message.chat.id, int(mid))
    await cq.answer()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
